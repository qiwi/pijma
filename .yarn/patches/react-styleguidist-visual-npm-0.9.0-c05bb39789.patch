diff --git a/src/commands/test.js b/src/commands/test.js
index 3a72c5b66ae674a234322fa4fdc6859044b6726e..eee67e66b26e448b931e8c7fb2e0cc98dd5be974 100644
--- a/src/commands/test.js
+++ b/src/commands/test.js
@@ -6,7 +6,7 @@ const {
   compareNewScreenshotsToRefScreenshots,
   removeNonRefScreenshots
 } = require('../utils/image')
-const { getPreviews, takeNewScreenshotsOfPreviews } = require('../utils/page')
+const { getUrls, getPreviews, takeNewScreenshotsOfPreviews } = require('../utils/page')
 const { debug, spinner } = require('../utils/debug')
 
 const testSchema = joi
@@ -78,6 +78,14 @@ async function test (partialOptions) {
 
     browser = useConnect ? await puppeteer.connect(connectOptions) : await puppeteer.launch(launchOptions)
     const page = await browser.newPage()
+    await page.setRequestInterception(true)
+    page.on('request', request => {
+      if (request.resourceType() === 'image' || request.resourceType() === 'font') {
+        request.abort()
+      } else {
+        request.continue()
+      }
+    })
 
     for (const viewport of Object.keys(viewports)) {
       const progress = spinner({
@@ -86,8 +94,15 @@ async function test (partialOptions) {
         stop: `Finished taking screenshots for viewport ${viewport}`
       })
       progress.start()
+      let previews = {}
       await page.setViewport(viewports[viewport])
-      const previews = await getPreviews(page, { url, filter, viewport, navigationOptions })
+      const urls = await getUrls(page, { url, navigationOptions })
+      for (let i = 0; i < urls.length; i++) {
+        previews = {
+          ...previews,
+          ...await getPreviews(page, { url: urls[i], filter, viewport, navigationOptions }),
+        }
+      }
       await takeNewScreenshotsOfPreviews(page, previews, { dir, progress, navigationOptions, wait })
       progress.stop()
     }
diff --git a/src/utils/image.js b/src/utils/image.js
index a947e62b32350693eca7f260bc88108c1cbc13c9..2bd3ce7b1646bdd1b439b4d194c502dbb724c1bd 100644
--- a/src/utils/image.js
+++ b/src/utils/image.js
@@ -48,21 +48,26 @@ async function compareNewScreenshotsToRefScreenshots ({ dir, filter, threshold,
     if (!refImgExists) {
       await promoteNewScreenshot(newImg)
     } else {
-      const pixels = await diffScreenshots(newImg, refImg, diffImg, threshold)
-      if (pixels === 0) {
-        success('Screenshots %s and %s match', chalk.cyan(newImg), chalk.cyan(refImg))
-        if (deleteScreenshotsWhenAccepted) {
-          await remove(newImg)
-          await remove(diffImg)
-        }
-      } else {
-        failure('Screenshots %s and %s differ in %s pixels', chalk.cyan(newImg), chalk.cyan(refImg), chalk.red(pixels))
-        termImg(diffImg, {
-          fallback: () => {
-            info('Check out the diff at %s', chalk.cyan(diffImg))
+      try {
+        const pixels = await diffScreenshots(newImg, refImg, diffImg, threshold)
+        if (pixels === 0) {
+          success('Screenshots %s and %s match', chalk.cyan(newImg), chalk.cyan(refImg))
+          if (deleteScreenshotsWhenAccepted) {
+            await remove(newImg)
+            await remove(diffImg)
           }
-        })
-        diffCount++
+        } else {
+          failure('Screenshots %s and %s differ in %s pixels', chalk.cyan(newImg), chalk.cyan(refImg), chalk.red(pixels))
+          termImg(diffImg, {
+            fallback: () => {
+              info('Check out the diff at %s', chalk.cyan(diffImg))
+            }
+          })
+          diffCount++
+        }
+      }
+      catch (err) {
+        failure('Error while compare %s and %s: %s', chalk.cyan(newImg), chalk.cyan(refImg), chalk.red(err))
       }
     }
   }
diff --git a/src/utils/page.js b/src/utils/page.js
index 386ba233f09798cc5b1ed553617ec5c960b5e0de..49fca66d38f72329f95b4a8e753e15ed32560f0c 100644
--- a/src/utils/page.js
+++ b/src/utils/page.js
@@ -6,6 +6,15 @@ const { debug } = require('./debug')
 
 const ensureDir = promisify(fs.ensureDir)
 
+async function getUrls (page, { url, navigationOptions }) {
+  await goToUrl(page, url, navigationOptions)
+  return page.evaluate(getUrlsInPage)
+}
+
+function getUrlsInPage () {
+  return Array.from(document.querySelectorAll('[href^="/#/"]')).map((el) => el.href)
+}
+
 async function getPreviews (page, { url, filter, viewport, navigationOptions }) {
   await goToUrl(page, url, navigationOptions)
 
@@ -69,6 +78,7 @@ async function takeNewScreenshotsOfPreviews (page, previewMap, { dir, progress,
 
       const { url } = preview
       await goToHashUrl(page, url)
+      await page.addStyleTag({ content: '* { animation: none !important; transition: none !important; -webkit-font-smoothing: none !important; }' })
 
       for (const actionState of actionStateList) {
         await takeNewScreenshotOfPreview(page, preview, previewIndex, actionState, { dir, wait })
@@ -155,6 +165,7 @@ function sleep (ms) {
 }
 
 module.exports = {
+  getUrls,
   getPreviews,
   takeNewScreenshotsOfPreviews
 }
